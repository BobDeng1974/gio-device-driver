/*
 * Device Driver
 *
 * Microservice for handling connection with Fog Nodes
 *
 * API version: 1.0.0
 * Contact: andrea.liut@gmail.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package service

import (
	"bytes"
	"encoding/json"
	"fmt"
	"gio-device-driver/pkg/model"
	"log"
	"net/http"
	"net/url"
	"os"
)

const (
	defaultRoomName = "default"
)

// A CallbackResponseData represents data sent with a callback
type CallbackResponseData struct {
	PeripheralID string        `json:"peripheral_id"`
	Reading      model.Reading `json:"reading"`
}

// A DeviceService stores information about a Device Service Microservice
type DeviceService struct {
	url      string
	roomName string
}

// Registers a new device
func (ds *DeviceService) Register(id string) (*model.GioDevice, error) {
	// Create the room
	roomData := model.Room{
		Name: ds.roomName,
	}

	roomBody, _ := json.Marshal(roomData)

	roomUrl := fmt.Sprintf("%s/rooms", ds.url)
	roomResponse, err := http.Post(roomUrl, "application/json", bytes.NewBuffer(roomBody))

	if err != nil {
		return nil, err
	}

	defer roomResponse.Body.Close()

	if roomResponse.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("cannot perform the requested operation: (%d) %s", roomResponse.StatusCode, roomResponse.Status)
	}

	var room model.Room
	if err := json.NewDecoder(roomResponse.Body).Decode(&room); err != nil {
		return nil, err
	}

	// Register the Device
	deviceData := model.GioDevice{
		Name: "device" + id,
		Mac:  id,
	}

	deviceBody, _ := json.Marshal(deviceData)

	devicesUrl := fmt.Sprintf("%s/rooms/%s/devices", ds.url, room.ID)
	deviceResponse, err := http.Post(devicesUrl, "application/json", bytes.NewBuffer(deviceBody))

	if err != nil {
		return nil, err
	}

	defer deviceResponse.Body.Close()

	if deviceResponse.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("cannot perform the requested operation: (%d) %s", deviceResponse.StatusCode, deviceResponse.Status)
	}

	// Take the id from the response
	var device model.GioDevice
	_ = json.NewDecoder(deviceResponse.Body).Decode(&device)

	return &device, nil
}

// Sends data of a device
func (ds *DeviceService) SendData(device *model.GioDevice, reading *model.Reading) error {
	body, err := json.Marshal(reading)
	if err != nil {
		return err
	}

	readingsUrl := fmt.Sprintf("%s/rooms/%s/devices/%s/readings", ds.url, device.Room, device.ID)
	res, err := http.Post(readingsUrl, "application/json", bytes.NewBuffer(body))

	if err != nil {
		return err
	}

	defer res.Body.Close()

	if res.StatusCode != http.StatusOK {
		return fmt.Errorf("cannot perform the requested operation: (%d) %s", res.StatusCode, res.Status)
	}

	return nil
}

var deviceServiceInstance *DeviceService = nil

func NewDeviceService() (*DeviceService, error) {
	serviceHost := os.Getenv("DEVICE_SERVICE_HOST")
	servicePort := os.Getenv("DEVICE_SERVICE_PORT")

	roomName := os.Getenv("DEVICE_SERVICE_ROOM_NAME")
	if roomName == "" {
		roomName = defaultRoomName
	}

	if deviceServiceInstance == nil {
		u := fmt.Sprintf("http://%s:%s", serviceHost, servicePort)
		log.Printf("DeviceService URL: %s\n", u)
		log.Printf("Room name: %s\n", roomName)

		_, err := url.Parse(u)
		if err != nil {
			return nil, err
		}

		deviceServiceInstance = &DeviceService{
			url:      u,
			roomName: roomName,
		}
	}

	return deviceServiceInstance, nil
}
